{"version":3,"file":"schema.js","sourceRoot":"","sources":["schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model } from \"mongoose\";\nimport { RatedEntitieBase } from \"./entities/RatedEntitieBase\";\nimport { JobEntitie } from \"./entities/JobEntitie\";\nimport { ApplicantEntity } from \"./entities/ApplicantEntity\";\n\nconst mongoose = require('mongoose');\n\nexport class MongoContextFactory\n{\n\tpublic AgeModel: Model<any>;\n\tpublic ExpModel: Model<any>;\n\tpublic StudModel: Model<any>;\n\tpublic FamModel: Model<any>;\n\tpublic PaymentModel: Model<any>;\n\n\tpublic JobModel: Model<any>;\n\tpublic ApplicantModel: Model<any>;\n\n\tprivate readonly url: string;\n\n\tconstructor(dbName, port)\n\t{\n\t\tthis.url = `mongodb://localhost:${ port }/${ dbName }`;\n\t}\n\n\tasync TryConnectAsync(): Promise<boolean>\n\t{\n\t\tconsole.log(\"try connect to \", this.url);\n\n\t\tlet db = mongoose.connection;\n\n\t\tlet isConnected: boolean = await new Promise((resolve) =>\n\t\t{\n\t\t\tmongoose.connect(this.url, { useNewUrlParser: true });\n\n\t\t\tdb.on('error', () =>\n\t\t\t{\n\t\t\t\tconsole.error.bind(console, 'connection error:');\n\t\t\t\tresolve(false);\n\t\t\t});\n\n\t\t\tdb.once('open', () =>\n\t\t\t{\n\t\t\t\tconsole.log(\"connected to \", this.url);\n\t\t\t\tresolve(true);\n\t\t\t});\n\t\t});\n\n\t\tif(isConnected)\n\t\t{\n\t\t\tlet ratedEntitiesSchema = new mongoose.Schema(RatedEntitieBase.GetSchemaInfo());\n\n\t\t\tthis.AgeModel     = mongoose.model(\"age\", ratedEntitiesSchema);\n\t\t\tthis.ExpModel     = mongoose.model(\"exp\", ratedEntitiesSchema);\n\t\t\tthis.StudModel    = mongoose.model(\"stud\", ratedEntitiesSchema);\n\t\t\tthis.FamModel     = mongoose.model(\"fam\", ratedEntitiesSchema);\n\t\t\tthis.PaymentModel = mongoose.model(\"payment\", ratedEntitiesSchema);\n\n\t\t\tlet jobSchema = new mongoose.Schema(JobEntitie.GetSchemaInfo());\n\t\t\tthis.JobModel = mongoose.model(\"job\", jobSchema);\n\n\t\t\tlet applicantSchema = new mongoose.Schema(ApplicantEntity.GetSchemaInfo());\n\t\t\tthis.ApplicantModel = mongoose.model(\"applicant\", applicantSchema);\n\t\t}\n\n\t\treturn isConnected;\n\t}\n\n\tpublic async SelectAsync<T>(model: Model<any>, object: T | any, filter: object): Promise<T[]>\n\t{\n\t\treturn await new Promise((resolve, reject) =>\n\t\t{\n\t\t\tlet dependencies = object.IncludeDependencies();\n\n\t\t\tmodel.find(filter)\n\t\t\t\t .populate(dependencies)\n\t\t\t\t .exec((err, res) =>\n\t\t\t\t {\n\t\t\t\t\t if(err)\n\t\t\t\t\t {\n\t\t\t\t\t\t console.error(err);\n\t\t\t\t\t\t reject();\n\t\t\t\t\t }\n\n\t\t\t\t\t let represented: T[] = res.map(x => object.Represent(x));\n\n\t\t\t\t\t resolve(represented);\n\t\t\t\t });\n\t\t});\n\t}\n\n\tpublic async SaveAsync<T>(dbEntry: any, represent: Function): Promise<T>\n\t{\n\t\treturn new Promise((resolve, reject) =>\n\t\t{\n\t\t\tdbEntry.save(function(err, dbEntry)\n\t\t\t{\n\t\t\t\tif(err)\n\t\t\t\t{\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\treject();\n\t\t\t\t}\n\n\t\t\t\tresolve(represent(dbEntry));\n\t\t\t});\n\t\t});\n\t}\n}"]}