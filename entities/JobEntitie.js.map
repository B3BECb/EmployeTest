{"version":3,"file":"JobEntitie.js","sourceRoot":"","sources":["JobEntitie.ts"],"names":[],"mappings":";;AAAA,6DAA0D;AAG1D,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACrC,MAAM,KAAK,GAAM,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;AAEvC,MAAM,UACL,SAAQ,uCAAkB;IAQ1B,YAAY,IAAY,EACrB,GAAqB,EACrB,MAAwB,EACxB,UAA4B,EAC5B,UAA4B,EAC5B,OAAyB,EACzB,OAAe,EACf,UAAkB,EAClB,OAAe;QAEjB,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;QAEtC,IAAI,CAAC,MAAM,GAAO,MAAM,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAM,OAAO,CAAC;QAC1B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAM,OAAO,CAAC;IAC3B,CAAC;IAEM,MAAM,CAAC,aAAa;QAE1B,IAAI,IAAI,GAAU,uCAAkB,CAAC,aAAa,EAAE,CAAC;QACrD,IAAI,CAAC,MAAM,GAAO,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;QACxD,IAAI,CAAC,UAAU,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;QACvD,IAAI,CAAC,OAAO,GAAM,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;QAC3D,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAM,KAAK,CAAC,MAAM,CAAC;QAE/B,OAAO,IAAI,CAAC;IACb,CAAC;IAEM,MAAM,CAAC,SAAS,CAAC,KAAiB;QAExC,IAAI,IAAI,GAAU,uCAAkB,CAAC,SAAS,CAAC,KAAK,CAAe,CAAC;QACpE,IAAI,CAAC,MAAM,GAAO,KAAK,CAAC,MAAM,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,OAAO,GAAM,KAAK,CAAC,OAAO,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,OAAO,GAAM,KAAK,CAAC,OAAO,CAAC;QAChC,OAAO,IAAI,CAAC;IACb,CAAC;IAEM,SAAS;QAEf,IAAI,IAAI,GAAU,KAAK,CAAC,SAAS,EAAE,CAAC;QACpC,IAAI,CAAC,MAAM,GAAO,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,OAAO,GAAM,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC3D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,OAAO,GAAM,IAAI,CAAC,OAAO,CAAC;QAC/B,OAAO,IAAI,CAAC;IACb,CAAC;CACD;AAEQ,gCAAU","sourcesContent":["import { TestSysEntitieBase } from \"./TestSysEntitieBase\";\nimport { RatedEntitieBase } from \"./RatedEntitieBase\";\n\nconst mongoose = require('mongoose');\nconst Types    = mongoose.Schema.Types;\n\nclass JobEntitie\n\textends TestSysEntitieBase\n{\n\tpublic Studie: RatedEntitieBase;\n\tpublic Experience: RatedEntitieBase;\n\tpublic Payment: RatedEntitieBase;\n\tpublic Employment: string;\n\tpublic MinRate: number;\n\n\tconstructor(name: string,\n\t\t\t\tage: RatedEntitieBase,\n\t\t\t\tstudie: RatedEntitieBase,\n\t\t\t\texperience: RatedEntitieBase,\n\t\t\t\tfamilyType: RatedEntitieBase,\n\t\t\t\tpayment: RatedEntitieBase,\n\t\t\t\tcomment: string,\n\t\t\t\temployment: string,\n\t\t\t\tminRate: number)\n\t{\n\t\tsuper(name, age, familyType, comment);\n\n\t\tthis.Studie     = studie;\n\t\tthis.Experience = experience;\n\t\tthis.Payment    = payment;\n\t\tthis.Employment = employment;\n\t\tthis.MinRate    = minRate;\n\t}\n\n\tpublic static GetSchemaInfo(): any\n\t{\n\t\tlet base: any   = TestSysEntitieBase.GetSchemaInfo();\n\t\tbase.Studie     = { type: Types.ObjectId, ref: \"stud\" };\n\t\tbase.Experience = { type: Types.ObjectId, ref: \"exp\" };\n\t\tbase.Payment    = { type: Types.ObjectId, ref: \"payment\" };\n\t\tbase.Employment = Types.String;\n\t\tbase.MinRate    = Types.Number;\n\n\t\treturn base;\n\t}\n\n\tpublic static Represent(entry: JobEntitie): JobEntitie\n\t{\n\t\tlet base        = TestSysEntitieBase.Represent(entry) as JobEntitie;\n\t\tbase.Studie     = entry.Studie;\n\t\tbase.Experience = entry.Experience;\n\t\tbase.Payment    = entry.Payment;\n\t\tbase.Employment = entry.Employment;\n\t\tbase.MinRate    = entry.MinRate;\n\t\treturn base;\n\t}\n\n\tpublic ToDbEntry(): any\n\t{\n\t\tlet base        = super.ToDbEntry();\n\t\tbase.Studie     = mongoose.Types.ObjectId(this.Studie.Id);\n\t\tbase.Experience = mongoose.Types.ObjectId(this.Experience.Id);\n\t\tbase.Payment    = mongoose.Types.ObjectId(this.Payment.Id);\n\t\tbase.Employment = this.Employment;\n\t\tbase.MinRate    = this.MinRate;\n\t\treturn base;\n\t}\n}\n\nexport { JobEntitie };"]}